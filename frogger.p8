pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
-- frogger_dynamic_map.p8
-- full pico-8 frogger with dynamic map regeneration on score,
-- progressive difficulty, cars only on roads, logs only on water,
-- top row = homes, bottom row = grass

-- game states
menu = 0
playing = 1
paused = 2
game_over = 3
char_select = 4  

-- state
game_state = menu

-- player
selected_char = 1  -- default frog sprite

frog_x = 64
frog_y = 112
frog_target_x = 64
frog_target_y = 112
frog_speed = 4      -- smooth move speed (px per frame)
frog_size = 8      -- 8x8 sprite

score = 0
lives = 3
level = 1
high_score = 0

leaderboard_scores = {}
-- leaderboard add (manual sort)
function add_score(s)
    add(leaderboard_scores, s)
    -- sort descending
    for i=1,#leaderboard_scores-1 do
        for j=i+1,#leaderboard_scores do
            if leaderboard_scores[j] > leaderboard_scores[i] then
                leaderboard_scores[i], leaderboard_scores[j] = leaderboard_scores[j], leaderboard_scores[i]
            end
        end
    end
    -- keep top 5
    while #leaderboard_scores > 5 do
        deli(leaderboard_scores)
    end
end


function draw_char_select()
    cls(0)
    print("choose your frog", 36, 20, 11)

    -- draw available options in a row
    for i=1,5 do
        local x = 24 + (i-1)*20
        local y = 60
        spr(i, x, y)
        -- highlight selected sprite
        if i == selected_char then
            rect(x-2, y-2, x+9, y+9, 7)
        end
    end

    print("use <- -> and x", 40, 100, 7)
end


-- homes (top row)
homes = {}
home_y = 4
home_w = 16
home_h = 8

-- map rows (8 rows of 16px each => 128px height)
-- map_rows[1] is top (y=0), map_rows[8] is bottom (y=112)
map_rows = {}

-- cars
cars = {}
car_speed = 1
car_spawn_timer = 0
car_spawn_delay = 40

-- logs
logs = {}
log_speed_base = 0.6
log_speed_range = 0.2
log_spawn_timer = 0
log_spawn_delay = 200
log_w = 32
log_h = 16

-- progressive difficulty (per frame)
car_speed_increment = 0.0008
log_speed_increment = 0.0005

-- music system
current_music_pattern = 0
music_timer = 0
music_pattern_duration = 300  -- frames per pattern (5 seconds at 60fps)
gameplay_music_playing = false

-- tile sprite ranges for terrain (keeps the sprite-tiled look)
tile_water = {192,208}
tile_road  = {200,216}
tile_grass = {224,240}

-- util: clamp
function clamp(v, a, b)
    if v < a then return a end
    if v > b then return b end
    return v
end

-- music control functions
function start_gameplay_music()
    gameplay_music_playing = true
    current_music_pattern = 0
    music_timer = 0
    music(0, 0, 0)  -- start pattern 0
end

function stop_gameplay_music()
    gameplay_music_playing = false
    music(-1)  -- stop music
end

function start_gameover_music()
    stop_gameplay_music()
    music(6, 0, 0)  -- start pattern 6
end

function update_gameplay_music()
    if not gameplay_music_playing then return end
    
    music_timer = music_timer + 1
    if music_timer >= music_pattern_duration then
        music_timer = 0
        current_music_pattern = current_music_pattern + 1
        if current_music_pattern > 5 then
            current_music_pattern = 0  -- loop back to pattern 0
        end
        music(current_music_pattern, 0, 0)
    end
end

-- init
function _init()
    -- homes (5 slots)
                homes = {}
                for i=0,4 do
                    add(homes, {
                        x = i * 24 + 8,
                        y = home_y,
                        sprite = 13 + flr(rnd(6))  -- random sprite 13-18
                    })
                end

    generate_map()
end

-- generate_map: top = homes, bottom = grass, middle 6 rows randomized
function generate_map()
    cars = {}
    logs = {}
    water_subrow_timers = {}

    map_rows = {}

    -- row 1: homes
    add(map_rows, "homes")

    -- middle 6 rows: shuffled mix
    local chunks = {"road","road","water","water","grass","grass"}
    for i=#chunks,2,-1 do
        local j = flr(rnd(i)) + 1
        chunks[i], chunks[j] = chunks[j], chunks[i]
    end
    for c in all(chunks) do
        add(map_rows, c)
    end

    -- bottom row: grass
    add(map_rows, "grass")

    -- initialize sub-row timers
    local subrows_per_water_row = 3
    for i=1,#map_rows do
        if map_rows[i] == "water" then
            water_subrow_timers[i] = {}
            for sr=1,subrows_per_water_row do
                water_subrow_timers[i][sr] = flr(rnd(log_spawn_delay)) -- start with random offset
            end
        end
    end
end

function get_row_y_positions(row_type)
    local ys = {}
    for i=1,#map_rows do
        if map_rows[i] == row_type then
            local y = (i-1) * 16
            add(ys, y)
        end
    end
    return ys
end

-- add a car on a random road row
function add_car()
    local road_rows = get_row_y_positions("road")
    if #road_rows == 0 then return end

    local y = road_rows[flr(rnd(#road_rows))+1] + 4 -- center inside 16px row
    local dir = rnd(2) > 1 and 1 or -1
    local sx = dir == 1 and -20 or 148
    local speed = dir * (car_speed + level * 0.35)

    -- pick a sprite from 6-9
    local sprite_choices = {6, 7, 8, 9}
    local sprite_id = sprite_choices[flr(rnd(#sprite_choices)) + 1]

    add(cars, {
        x = sx,
        y = y,
        speed = speed,
        sprite = sprite_id
    })
end

-- add a log on a random water row
function add_log(row_index, subrow_index)
    local band_y = (row_index-1)*16
    local subrows_per_water_row = 3
    local y = band_y + (subrow_index-1)*(16 / subrows_per_water_row)

    local dir = rnd(2) > 1 and 1 or -1
    local sx = dir == 1 and -40 or 148
    local speed_variation = rnd(log_speed_range) - (log_speed_range/2)
    local speed = dir * (log_speed_base + speed_variation)

    -- pick sprite 10, 11, 12
    local sprite_choices = {10,11,12}
    local sprite_id = sprite_choices[flr(rnd(#sprite_choices))+1]

    -- log length
    local log_length = flr(rnd(3)) + 2

    add(logs, {
        x = sx,
        y = y,
        speed = speed,
        sprite = sprite_id,
        length = log_length,
        row = row_index,
        subrow = subrow_index
    })
end

-- frog movement (smooth toward target)
function update_frog()
    if game_state ~= playing then return end

    -- input (grid steps of 8 using btnp)
    if btnp(0) then frog_target_x = clamp(frog_target_x - 8, 0, 120) end
    if btnp(1) then frog_target_x = clamp(frog_target_x + 8, 0, 120) end
    if btnp(2) then frog_target_y = clamp(frog_target_y - 8, 0, 120) end
    if btnp(3) then frog_target_y = clamp(frog_target_y + 8, 0, 120) end

    -- smooth movement toward target
    local dx = frog_target_x - frog_x
    local dy = frog_target_y - frog_y

    if abs(dx) > frog_speed then
        frog_x = frog_x + sgn(dx) * frog_speed
    else
        frog_x = frog_target_x
    end

    if abs(dy) > frog_speed then
        frog_y = frog_y + sgn(dy) * frog_speed
    else
        frog_y = frog_target_y
    end

    -- check if reached any home slot (top row)
    for home in all(homes) do
        if frog_x + frog_size > home.x and frog_x < home.x + home_w and
           frog_y + frog_size > home.y and frog_y < home.y + home_h then
            -- score
            score = score + (100 * level)
            level = level + 1
            -- increase difficulty on scoring
            car_speed = car_speed + 0.2
            log_speed_base = log_speed_base + 0.1
            -- regenerate map and clear dynamic objects
            generate_map()
            -- reset frog to start position
            frog_target_x = 64
            frog_target_y = 112
            frog_x = frog_target_x
            frog_y = frog_target_y
            return
        end
    end
end

-- collisions & water handling
function check_collisions()
    if game_state ~= playing then return end

    -- car collisions (unchanged)
    for car in all(cars) do
                        local car_w = 16
                                local car_h = 8
                                if frog_x < car.x + car_w and
                                   frog_x + frog_size > car.x and
                                   frog_y < car.y + car_h and
                                   frog_y + frog_size > car.y then

           -- hit
           lives = lives - 1
           frog_target_x = 64
           frog_target_y = 112
           frog_x = frog_target_x
           frog_y = frog_target_y
           if lives <= 0 then
               game_state = game_over
               start_gameover_music()
           end
           return
        end
    end

    -- water collision: determine if frog is in any water band
    local water_rows = get_row_y_positions("water")
    local in_water = false
    for y in all(water_rows) do
        if frog_y >= y and frog_y < y + 16 then
            in_water = true
            break
        end
    end

    if in_water then
        -- check logs for carry
        local on_log = false
        for log in all(logs) do
            -- compute log width in px
            local log_w_px = log.length * 8
            -- vertical overlap: frog and log (log.y is band_y + 4, frog_y tends to be multiples of 8)
            if frog_y + frog_size > log.y and frog_y < log.y + 8 then
                -- horizontal overlap
                if frog_x + frog_size > log.x and frog_x < log.x + log_w_px then
                    on_log = true
                    -- carry frog with log's horizontal speed
                    frog_x = frog_x + log.speed
                    frog_target_x = frog_target_x + log.speed
                    break
                end
            end
        end

        if not on_log then
            -- drown
            lives = lives - 1
            frog_target_x = 64
            frog_target_y = 112
            frog_x = frog_target_x
            frog_y = frog_target_y
            if lives <= 0 then
                game_state = game_over
                start_gameover_music()
            end
            return
        end
    end

    -- clamp frog to screen
    frog_x = clamp(frog_x, 0, 120)
    frog_target_x = clamp(frog_target_x, 0, 120)
    frog_y = clamp(frog_y, 0, 120)
    frog_target_y = clamp(frog_target_y, 0, 120)
end
-- update cars: move and remove off-screen
function update_cars()
    for car in all(cars) do
        car.x = car.x + car.speed
        if car.x < -40 or car.x > 180 then
            del(cars, car)
        end
    end

    car_spawn_timer = car_spawn_timer + 1
    if car_spawn_timer >= car_spawn_delay then
        add_car()
        car_spawn_timer = 0
    end
end

-- update logs
function update_logs()
    -- move logs & remove off-screen
    for log in all(logs) do
        log.x += log.speed
        local width = log.length * 8
        if log.x + width < -40 or log.x > 200 then
            del(logs, log)
        end
    end

    local subrows_per_water_row = 3

    -- spawn logs per water sub-row independently
    for i=1,#map_rows do
        if map_rows[i] == "water" then
            for sr=1,subrows_per_water_row do
                water_subrow_timers[i][sr] += 1
                local delay_with_jitter = log_spawn_delay + flr(rnd(10)) - 5
                if water_subrow_timers[i][sr] >= delay_with_jitter then
                    add_log(i, sr)
                    water_subrow_timers[i][sr] = 0
                end
            end
        end
    end
end

-- background terrain drawing helper (two rows of 8x8 sprites)
function draw_terrain(rows, dx, dy)
    for i=0,7 do
        spr(rows[1] + i, dx + i*8, dy)
    end
    for i=0,7 do
        spr(rows[2] + i, dx + i*8, dy + 8)
    end
end

-- draw homes (top row visuals + home slots)
function draw_homes_row()
    for h in all(homes) do
        local sx = (h.sprite % 16) * 8
        local sy = flr(h.sprite / 16) * 8
        sspr(sx, sy, 8, 8, h.x, h.y, 16, 12)  -- draw scaled 16x16
    end
end


-- draw background based on map_rows
function draw_background()
    cls(0)
    for i=1,#map_rows do
        local row = map_rows[i]
        local y = (i-1) * 16
        if row == "grass" then
            draw_terrain(tile_grass, 0, y)
            draw_terrain(tile_grass, 64, y)
        elseif row == "road" then
            draw_terrain(tile_road, 0, y)
            draw_terrain(tile_road, 64, y)
        elseif row == "water" then
            draw_terrain(tile_water, 0, y)
            draw_terrain(tile_water, 64, y)
        elseif row == "homes" then
            -- draw top row background
            rectfill(0, y, 127, y+15, 3) -- white homes row
            draw_homes_row()
        end
    end
end

-- draw dynamic objects
function draw_logs()
    for log in all(logs) do
    for i=0,log.length-1 do
        spr(log.sprite, log.x + i*8, log.y)
    end
end
end

function draw_cars()
                palt(0,false)    
    for car in all(cars) do
        -- sspr(sx, sy, sw, sh, dx, dy, dw, dh)
        -- car.sprite is the id 6-9
        local sx = (car.sprite % 16) * 8  -- x in sprite sheet
        local sy = flr(car.sprite / 16) * 8 -- y in sprite sheet

        sspr(sx, sy, 8, 8, car.x, car.y, 15, 15)
    end
end


function draw_frog()
    palt(6,true)
    spr(frog_sprite, frog_x, frog_y)
end


-- ui
function draw_ui()
    if game_state == menu then
        print("frogger", 47, 42, 11)
        print("press x for intro", 28, 60, 7)
    elseif game_state == intro then
        print("instructions", 40, 20, 11)
        print("⬅️➡️⬆️⬇️ move frog", 20, 40, 7)
        print("avoid cars, ride logs", 20, 50, 7)
        print("reach homes to score", 20, 60, 7)
        print("press x to play", 32, 90, 7)
    elseif game_state == paused then
        print("paused", 52, 56, 7)
        print("press o to resume", 26, 70, 7)
        print("press x for menu", 28, 80, 7)
    elseif game_state == game_over then
                    -- update high score if the current score is higher
                    if score > high_score then
                        high_score = score
                    end
                    cls(0)
        print("game over", 44, 40, 8)
        print("final score: "..score, 36, 55, 7)
        print("high score: "..high_score, 38, 65, 7)
        print("press x for menu", 32, 75, 7)
    elseif game_state == leaderboard then
        print("leaderboard", 40, 20, 11)
        for i=1,#leaderboard_scores do
            print(i..". "..leaderboard_scores[i], 40, 30+i*10, 7)
        end
        print("press x for menu", 28, 100, 7)
    elseif game_state == playing then
        print("score: "..score, 2, 2, 0) -- black
        print("lives: "..lives, 2, 10, 0) -- black
        print("level: "..level, 90, 2, 0) -- black
    end
end

-- main update
function _update()
    if game_state == menu then
        if btnp(5) then
            game_state = intro  -- go to character selection from menu
        end

    elseif game_state == char_select then
        -- move selection left/right
        if btnp(0) then
            selected_char = selected_char - 1
            if selected_char < 1 then selected_char = 5 end
        end
        if btnp(1) then
            selected_char = selected_char + 1
            if selected_char > 5 then selected_char = 1 end
        end

        -- confirm selection with x button
        if btnp(5) then
            frog_sprite = selected_char  -- save chosen frog
            score = 0
            lives = 3
            level = 1
            car_speed = 1
            log_speed_base = 0.6
            cars = {} logs = {}
            car_spawn_timer = 0
            log_spawn_timer = 0
            generate_map()
            frog_x, frog_y = 64, 112
            frog_target_x, frog_target_y = frog_x, frog_y
            game_state = playing
            start_gameplay_music()
        end

    elseif game_state == intro then
        if btnp(5) then
            game_state = char_select
        end

    elseif game_state == playing then
        if btnp(4) then game_state = paused end
        car_speed += car_speed_increment
        log_speed_base += log_speed_increment
        update_gameplay_music()
        update_frog()
        update_cars()
        update_logs()
        check_collisions()

    elseif game_state == paused then
        if btnp(4) then game_state = playing end
        if btnp(5) then game_state = menu stop_gameplay_music() end

    elseif game_state == game_over then
        if btnp(5) then
            game_state = menu
        end

    elseif game_state == leaderboard then
        if btnp(5) then
            game_state = menu
        end
    end
end


-- main draw
function _draw()
    cls(0)
    palt(6,true)

    if game_state == char_select then
        draw_char_select()
    elseif game_state == playing or game_state == game_over then
        draw_background()
        draw_logs()
        draw_cars()
        draw_frog()
    end

    draw_ui()
end
__gfx__
00000000666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666446666662266666611666
0000000066666666666666666666666666666666666666666bbb0c666eee0c6669990c666ccc0d66666666666666666666666666644444466222222661111116
0070070066176716663767366627672666476746662767263bbb0c032eee0c0249990c041ccc0d0199944999eee22eeebbb33bbb444444442222222211111111
00077000661ccc1666333336662eee2666499946662ddd263bbb0c032eee0c0249990c041ccc0d014499994422eeee2233bbbb33444444442222222211111111
00077000666c1c666663b366666e2e6666694966666d2d663bbbbb332eeeee22499999441ccccc114444444422222222333333336ffffff66dddddd66cccccc6
00700700661ccc1666333336662eee2666499946662ddd26600660066006600660066006600660064499994422eeee2233bbbb336f7447f66d7227d66c7117c6
000000006616661666366636662666266646664666266626666666666666666666666666666666666666666666666666666666666ff44ff66dd22dd66cc11cc6
000000006666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666ff44ff66dd22dd66cc11cc6
66644666666996666668866600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
64444446699999966888888600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444999999998888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444999999998888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6bbbbbb66aaaaaa66eeeeee600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6b7447b66a7997a66e7887e600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6bb44bb66aa99aa66ee88ee600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6bb44bb66aa99aa66ee88ee600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
cccccccccccccccccccccc777cccccccccccccccccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
cccccccccccccccccc77777777ccccccccccccccccccccccccc7777777777cccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
cccccccccccccccc77ccccccc77ccccccccccccccccccccc777ccccccccc77ccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
cccccccc77ccccc77ccccccccc77cccccccccccc77ccccc77cccccccccccc77cdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
ccccccc777777c7ccccccccccccc7cccccccccc777777c7cccccccccccccccc7dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
ccccc77ccccc777cccccccccccccc7ccccccc77ccccc777cccccccccccccccccaaaadddaaaaaadddaaaaaddaaaaaadddaaaadddaaaaaadddaaaaaddaaaaaaddd
7ccc77ccccccccccccccccccccccc77c7ccc77ccccccccccccccccccccccccccaaaadddaaaaaadddaaaaaddaaaaaadddaaaadddaaaaaadddaaaaaddaaaaaaddd
77777cccccccccccccccccccccccccc777777cccccccccccccccccccccccccccaaaadddaaaaaadddaaaaaddaaaaaadddaaaadddaaaaaadddaaaaaddaaaaaaddd
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccaaaadddaaaaaadddaaaaaddaaaaaadddaaaadddaaaaaadddaaaaaddaaaaaaddd
cccc777ccccccccccccccccccccccccccccc777cccccccccccccccccccccccccaaaadddaaaaaadddaaaaaddaaaaaadddaaaadddaaaaaadddaaaaaddaaaaaaddd
ccc77c77ccccccccccccccccccccccccccc77c77ccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
c77ccccc77cccc7777ccccccccccccccc77ccccc77cccc777777ccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
7ccccccccc77777cc77cccc7777ccc7777cccccccc77777ccccc7777ccccc777dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
ccccccccccccccccccc77777c777777ccccccccccccccccccccccccc777777ccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
3333bb33333333333333bb33333333333333bb33333333333333bb33333333330000000000000000000000000000000000000000000000000000000000000000
333b3bb333333333333b3bb333333333333b3bb333333333333b3bb3333333330000000000000000000000000000000000000000000000000000000000000000
33b333bb3333333333b333bb3333333333b333bb3333333333b333bb333333330000000000000000000000000000000000000000000000000000000000000000
3bb3333bb33333333bb3333bb33333333bb3333bb33333333bb3333bb33333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
333333333333bb33333333333333bb33333333333333bb33333333333333bb330000000000000000000000000000000000000000000000000000000000000000
333333333333bb33333333333333bb33333333333333bb33333333333333bb330000000000000000000000000000000000000000000000000000000000000000
33333333333b3bb333333333333b3bb333333333333b3bb333333333333b3bb30000000000000000000000000000000000000000000000000000000000000000
3333333333bb33bb3333333333bb33bb3333333333bb33bb3333333333bb33bb0000000000000000000000000000000000000000000000000000000000000000
3333333333b3333b3333333333b3333b3333333333b3333b3333333333b3333b0000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0114000020734200351c7341c0351973419535157343952520734200351c7341c0351953219035147341503121734210351c7341c0261973419035237341703521734395251c7341c03519734195351773717035
011400000c043090552072409055246151972315555090550c053090651972309565207242461509065155650c053060652072406065246151672306065125650c05306065167230656520724246150606515555
011400000c053021651e7240206524615197450e7650c05302165020651e7341e7350256524615020650e56501165010651e7240c05324615167230b0450d0650c05301165197440b56520724246150106515555
0114000020724200251c7241c02525742287421572439525207242a7422c7412c7322c72219025147242a74228742287451c7341e7421e7421e735237241702521724395251c7341c03519734195351773617035
0014000020724200251c7241c02525742287421572439525207242a7422c7412c7322c72219025147242f7422d7422d7452d734217422174221735237241702521724395251c7341c03519734195351773617035
0107000021072210322307223032240722405224032240121f0721f0521f0321f0121c0721c0521c0321c0121d0721d0321c0721c032170721705217032170121807218052180321802218022180121801218015
010700001d355243052135524305183552430521355243051f3552430523355243051a3552830523355283051d35528305213552430518355243052135528305183552930513355293050c355293052930529305
__music__
00 08094344
00 080a4344
00 0b094344
00 0c0a4344
00 0b094344
02 0c0a4344
00 0d0e7c72

